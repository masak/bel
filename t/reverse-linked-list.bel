(tem linked-list contents nil)

(def prs-linked-list (lst)
  (prs "<linked-list " lst!contents ">"))

(def rev-linked-list (lst)
  (let last (rev-linked-node lst!contents nil)
    (set lst!contents last)))

(def rev-linked-node (node prev)
  (if (no node)
      prev
      (let next (cdr node)              ; remember next node
        (set (cdr node) prev)           ; point backwards along list
        (rev-linked-node next node))))  ; recursively handle remainder

(set lst (make linked-list contents '(1 2 3 4 5)))
(rev-linked-list lst)
(pr (prs-linked-list lst) \lf)
