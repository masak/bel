#!/usr/bin/perl
use 5.006;
use strict;
use warnings;

use Language::Bel;
use Language::Bel::Reader qw(
    read_whole
    read_partial
);

binmode STDOUT, ':encoding(utf-8)';

sub prompt {
    my ($prompt) = @_;

    print($prompt);
    my $input = <>;
    return $input;
}

if (@ARGV) {
    eval_files(@ARGV);
}
else {
    repl();
}

sub eval_files {
    my (@files) = @_;

    for my $file (@files) {
        die "Bel source file not found: $file\n"
            unless -f $file;
    }

    my $b = Language::Bel->new();

    for my $file (@files) {
        my $source;
        {
            local $/;
            open my $fh, '<', $file
                or die "can't open $file for reading: $!";
            $source = <$fh>;
        }

        while ($source) {
            my $p = read_partial($source, 0, {});
            my $ast = $p->{ast};
            my $next_pos = $p->{pos};

            eval {
                $b->eval($ast);
            };
            if ($@) {
                print("Error: $@");
                last;
            }

            $source = substr($source, $next_pos);
            $source =~ s/^\s+//;
        }
    }
}

sub push_ats {
    my ($bel, $latest_value) = @_;

    if ($bel->has_global("@@")) {
        $bel->set_global("@@@", $bel->get_global("@@"));
    }

    if ($bel->has_global("@")) {
        $bel->set_global("@@", $bel->get_global("@"));
    }

    $bel->set_global("@", $latest_value);
}

sub repl {
    my $bel = Language::Bel->new();

    print("Language::Bel ", $Language::Bel::VERSION, " -- $^O.\n");
    while (defined (my $expr = prompt("> "))) {
        next if $expr =~ /^\s*(?:;|$)/;

        eval {
            my $result = $bel->read_eval_print($expr);
            push_ats($bel, $result);
        };
        if ($@) {
            print("Error: $@");
        }
    }
}
